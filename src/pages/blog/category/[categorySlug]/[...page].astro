---
import Layout from "@layouts/layout.astro";
import { categories } from "@lib/constants";
import { Card } from "@components/card";
import Pagination from "@components/pagination.astro";
import { getCollection } from "astro:content";
import { compareDesc, format, formatISO } from "date-fns";
import type { GetStaticPathsOptions } from "astro";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const blogPosts = await getCollection("blog", ({ data }) => {
    return data.isDraft !== true;
  });
  const sortedBlogPosts = blogPosts.sort((a, b) =>
    compareDesc(a.data.pubDate, b.data.pubDate),
  );
  return categories.flatMap((category) => {
    const { categorySlug, categoryName } = category;

    const filteredPosts = sortedBlogPosts.filter((post) => {
      return post.data.category.includes(categorySlug);
    });

    return paginate(filteredPosts, {
      params: { categorySlug },
      props: { categoryName },
      pageSize: 6,
    });
  });
}

const {
  page: {
    data,
    url: { prev, next },
  },
  categoryName,
} = Astro.props;
---

<Layout
  pageTitle={`${categoryName}に関する記事`}
  description={`${categoryName}の記事一覧`}
>
  <div class="container">
    <h1>{categoryName}</h1>

    <div class="grid">
      {
        data.map((post) => {
          const {
            slug,
            data: { title, pubDate, modDate },
          } = post;

          const pubDateISO = modDate ? formatISO(modDate) : formatISO(pubDate);
          const pubDateJA = modDate
            ? format(modDate, "yyyy年MM月dd日")
            : format(pubDate, "yyyy年MM月dd日");

          return (
            <Card
              url={`/blog/post/${slug}/`}
              title={title}
              dateTime={pubDateISO}
              date={pubDateJA}
              isModified={!!modDate}
            />
          );
        })
      }
    </div>

    <Pagination prev={prev} next={next} />
  </div>
</Layout>

<style is:global>
  main {
    display: grid;
    grid-template-columns: subgrid;
  }
</style>

<style>
  .container {
    grid-column: 2 / -2;
    display: grid;
    gap: calc(var(--body) * 2);
    align-content: start;
  }

  h1 {
    justify-self: center;
  }

  .grid {
    display: grid;
    gap: calc(var(--body) * 2);

    @media (width >= 768px) {
      grid-template-columns: minmax(0, 1fr) minmax(0, 1fr);
    }

    @media (width >= 1024px) {
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }
</style>
