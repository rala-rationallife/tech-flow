---
import Layout from "@layouts/layout.astro";
import Pagination from "@components/pagination.astro";
import { Picture } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { compareDesc, format, formatISO } from "date-fns";
import { categories } from "@lib/constants";
import "github-markdown-css/github-markdown-light.css";

interface Props {
  post: CollectionEntry<"blog">;
  url: {
    prev?: string;
    next?: string;
    prevTitle?: string;
    nextTitle?: string;
  };
}

export async function getStaticPaths({}) {
  const blogPosts = await getCollection("blog", ({ data }) => {
    return data.isDraft !== true;
  });
  const sortedBlogPosts = blogPosts.sort((a, b) =>
    compareDesc(a.data.pubDate, b.data.pubDate),
  );
  const numberOfPosts = blogPosts.length;

  return sortedBlogPosts.map((post) => {
    const { slug } = post;
    const currentPage = sortedBlogPosts.findIndex((post) => post.slug === slug);

    const prev =
      currentPage + 1 >= numberOfPosts
        ? {}
        : {
            prevTitle: sortedBlogPosts[currentPage + 1].data.title,
            prev: `/blog/post/${sortedBlogPosts[currentPage + 1].slug}/`,
          };

    const next =
      currentPage - 1 < 0
        ? {}
        : {
            nextTitle: sortedBlogPosts[currentPage - 1].data.title,
            next: `/blog/post/${sortedBlogPosts[currentPage - 1].slug}/`,
          };

    return { params: { slug }, props: { post, url: { ...prev, ...next } } };
  });
}

const { post, url } = Astro.props;
const { Content } = await post.render();

const {
  data: { title, pubDate, modDate, image, pageImg, category, description },
  slug,
} = post;

const pubDateISO = formatISO(pubDate);
const modDateISO = modDate && formatISO(modDate);

const pubDateJA = format(pubDate, "yyyy年MM月dd日");
const modDateJA = modDate && format(modDate, "yyyy年MM月dd日");

const blogUrl = `${import.meta.env.PUBLIC_SITE_URL}/blog/post/${slug}/`;
---

<Layout
  pageTitle={title}
  description={description}
  pageImg={pageImg}
  publishDate={pubDateISO}
  updateDate={modDateISO}
>
  <article>
    <div class="post-head">
      <h1>{title}</h1>
      <Picture src={image} alt={title} />

      <div>
        <time datetime={pubDateISO}>{pubDateJA}</time>

        <div class="categories">
          {
            category.map((categorySlug) => {
              const categoryName = categories?.find(
                (cat) => cat.categorySlug === categorySlug,
              )?.categoryName;
              return (
                <a href={`/blog/category/${categorySlug}/`}>
                  <span>#</span>
                  <span>{categoryName}</span>
                </a>
              );
            })
          }
        </div>
      </div>
    </div>

    <div class="markdown-body">
      <Content components={{ img: Picture }} />
    </div>

    <Pagination {...url} />
  </article>
</Layout>

<style is:global>
  main {
    display: grid;
    gap: var(--body);

    @media (width >= 900px) {
      gap: calc(var(--body) * 2);
      grid-template-columns: repeat(12, minmax(0, 1fr));
    }
  }

  body {
    .markdown-body {
      color: var(--text);

      h1,
      h2,
      h3 {
        border: none;
        padding: 0;
      }

      h1 {
        font-size: var(--heading1);
      }

      h2 {
        font-size: var(--heading2);
        margin-block: calc(var(--space-line) * 3) var(--space-line);
        padding-top: var(--space-line);

        & + p {
          margin-top: 0;
        }
      }

      h3 {
        font-size: var(--heading3);
        margin-block: var(--space-line);
        padding-top: var(--space-line);
      }

      p,
      pre {
        font-size: var(--body);
        line-height: 1.8;
        margin-block: var(--space-line);
      }

      pre {
        padding: var(--body);
      }

      p:has(> picture) {
        margin-block: calc(var(--space-line) * 2) var(--body);

        & + p {
          margin-top: var(--body);
        }
      }
    }
  }
</style>

<style>
  article {
    display: grid;
    gap: calc(var(--body) * 2);
    grid-template-columns: minmax(0, auto);

    @media (width >= 900px) {
      grid-column: 1 / 9;
    }
  }

  .post-head {
    display: grid;
    gap: var(--body);
  }

  .categories {
    display: flex;
    column-gap: var(--body);
    flex-wrap: wrap;
    color: var(--twitter);
  }
</style>
