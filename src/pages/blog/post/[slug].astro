---
import Layout from "@layouts/layout.astro";
import Pagination from "@components/pagination.astro";
import { Picture } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { compareDesc, format, formatISO } from "date-fns";
import { categories } from "@lib/constants";
import "github-markdown-css/github-markdown-light.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowRight, faHashtag } from "@fortawesome/free-solid-svg-icons";
import { getEntries } from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
  url: {
    prev?: string;
    next?: string;
    prevTitle?: string;
    nextTitle?: string;
  };
}

export async function getStaticPaths({}) {
  const blogPosts = await getCollection("blog", ({ data }) => {
    return data.isDraft !== true;
  });
  const sortedBlogPosts = blogPosts.sort((a, b) =>
    compareDesc(a.data.pubDate, b.data.pubDate),
  );
  const numberOfPosts = blogPosts.length;

  return sortedBlogPosts.map((post) => {
    const { slug } = post;
    const currentPage = sortedBlogPosts.findIndex((post) => post.slug === slug);

    const prev =
      currentPage + 1 >= numberOfPosts
        ? {}
        : {
            prevTitle: sortedBlogPosts[currentPage + 1].data.title,
            prev: `/blog/post/${sortedBlogPosts[currentPage + 1].slug}/`,
          };

    const next =
      currentPage - 1 < 0
        ? {}
        : {
            nextTitle: sortedBlogPosts[currentPage - 1].data.title,
            next: `/blog/post/${sortedBlogPosts[currentPage - 1].slug}/`,
          };

    return { params: { slug }, props: { post, url: { ...prev, ...next } } };
  });
}

const { post, url } = Astro.props;
const { Content } = await post.render();

const {
  data: {
    title,
    pubDate,
    modDate,
    image,
    pageImg,
    category,
    description,
    relatedPosts,
  },
} = post;

const pubDateISO = formatISO(pubDate);
const modDateISO = modDate && formatISO(modDate);

const pubDateJA = format(pubDate, "yyyy年MM月dd日");
const modDateJA = modDate && format(modDate, "yyyy年MM月dd日");

const related = relatedPosts ? await getEntries(relatedPosts) : [];
---

<Layout
  pageTitle={title}
  description={description}
  pageImg={pageImg}
  publishDate={pubDateISO}
  updateDate={modDateISO}
>
  <div class="container">
    <article>
      <div class="post-head">
        <h1>{title}</h1>
        <Picture src={image} alt={title} />

        <div class="date">
          <time datetime={pubDateISO}>公開：{pubDateJA}</time>
          {modDate && <time datetime={modDateISO}>更新：{modDateJA}</time>}
        </div>

        <div class="categories">
          {
            category?.map((categorySlug) => {
              const categoryName = categories?.find(
                (cat) => cat.categorySlug === categorySlug,
              )?.categoryName;
              return (
                <a href={`/blog/category/${categorySlug}/`}>
                  <span>#</span>
                  <span>{categoryName}</span>
                </a>
              );
            })
          }
        </div>
      </div>

      <div class="markdown-body">
        <Content components={{ img: Picture }} />
      </div>

      <div class="categories">
        {
          category?.map((categorySlug) => {
            const categoryName = categories?.find(
              (cat) => cat.categorySlug === categorySlug,
            )?.categoryName;
            return (
              <a href={`/blog/category/${categorySlug}/`}>
                <span>#</span>
                <span>{categoryName}</span>
              </a>
            );
          })
        }
      </div>

      <Pagination {...url} />

      {
        related.length > 0 && (
          <div class="related">
            <h2>関連記事</h2>

            <ul>
              {related.map((p) => {
                const {
                  slug,
                  data: { title },
                } = p;

                return (
                  <li>
                    <a href={`/blog/post/${slug}/`}>
                      <span>{title}</span>
                      <FontAwesomeIcon icon={faArrowRight} />
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        )
      }
    </article>

    <aside>
      <h2>キーワードで探す↓</h2>
      {
        categories.map((cat) => {
          return (
            <a href={`/blog/category/${cat.categorySlug}/`}>
              <FontAwesomeIcon icon={faHashtag} />
              <span>{cat.categoryName}</span>
            </a>
          );
        })
      }
    </aside>
  </div>
</Layout>

<style is:global>
  html {
    scroll-behavior: smooth;

    @media (prefers-reduced-motion: reduce) {
      scroll-behavior: auto;
    }
  }

  main {
    display: grid;
    grid-template-columns: subgrid;
  }

  body {
    .markdown-body {
      background-color: var(--background);
      color: var(--text);

      h1,
      h2,
      h3 {
        border: none;
        padding: 0;
      }

      h1 {
        font-size: var(--heading1);
      }

      h2 {
        font-size: var(--heading2);
        margin-block: calc(var(--space-line) * 3) var(--space-line);
        padding-top: var(--space-line);

        & + p {
          margin-top: 0;
        }
      }

      h3 {
        font-size: var(--heading3);
        margin-block: var(--space-line);
        padding-top: var(--space-line);
      }

      p,
      pre {
        font-size: var(--body);
        line-height: 1.8;
        margin-block: var(--space-line);
      }

      pre {
        border-radius: 0 0 calc(var(--body) / 2) calc(var(--body) / 2);
        padding: var(--body);
      }

      p:has(> picture) {
        margin-block: calc(var(--space-line) * 2) var(--body);

        & + p {
          margin-top: var(--body);
        }
      }

      figure {
        margin-block: calc(var(--space-line) * 2) var(--body);
        margin-inline: 0;

        img {
          width: 100%;
        }

        & + p {
          margin-top: var(--body);
        }
      }

      ul {
        display: grid;
        gap: var(--body);
        font-size: var(--body);
        list-style: revert;
        border: solid 1px var(--border-color);
        margin-block: var(--space-line);
        padding-block: var(--body);
        padding-inline: calc(var(--body) * 2) var(--body);
      }

      li {
        margin: 0;
      }

      a {
        color: inherit;
        text-decoration: underline;

        &:hover {
          text-decoration: none;
          opacity: 0.7;
        }
      }

      .code-title {
        background-color: #444444;
        color: #ffffff;
        margin-bottom: calc(var(--space-line) * -1);
        border-radius: calc(var(--body) / 2) calc(var(--body) / 2) 0 0;
        padding: calc(var(--body) * 0.5) var(--body);
      }
    }
  }
</style>

<style>
  .container {
    grid-column: 2 / -2;
    display: grid;
    gap: calc(var(--body) * 2);

    @media (width >= 1024px) {
      grid-template-columns: repeat(12, minmax(0, 1fr));
    }
  }

  article {
    display: grid;
    gap: calc(var(--body) * 2);
    grid-template-columns: minmax(0, auto);

    @media (width >= 1024px) {
      grid-column: 1 / span 8;
    }
  }

  aside {
    display: grid;
    gap: var(--body);
    align-content: start;
    font-size: var(--heading2);

    @media (width >= 1024px) {
      grid-column: 9 / span 4;
    }

    > a {
      color: #ffffff;
      background-color: var(--twitter);
      padding: var(--body);
      border-radius: var(--body);

      &:hover {
        opacity: 0.7;
      }
    }
  }

  .post-head {
    display: grid;
    gap: var(--body);
  }

  .date {
    display: grid;
  }

  .categories {
    display: flex;
    column-gap: var(--body);
    flex-wrap: wrap;
    color: #ffffff;

    > a {
      padding: calc(var(--body) * 0.5) var(--body);
      background-color: var(--twitter);
      border-radius: var(--body);

      &:hover {
        opacity: 0.7;
      }
    }
  }

  .related {
    display: grid;
    gap: var(--body);

    > ul {
      display: grid;
      gap: var(--body);
      font-size: var(--heading3);

      > li {
        background-color: var(--card-background);
        border-radius: var(--body);

        > a {
          display: grid;
          grid-auto-flow: column;
          justify-content: space-between;
          align-items: center;
          gap: var(--body);
          padding: var(--body);

          &:hover {
            opacity: 0.7;
          }
        }
      }
    }
  }
</style>
